#!/bin/bash
set -e
set -o pipefail

# Proxy token authenticates proxies joining the cluster
PROXY_TOKEN=$(uuid)
{{ teleport_bin_dir }}tctl nodes add --roles=proxy --ttl=4h --token=${PROXY_TOKEN}
aws ssm put-parameter --name /teleport/{{ teleport_cluster_name }}/tokens/proxy --region {{ teleport_region }} --type="SecureString" --value="${PROXY_TOKEN}" --overwrite

# Node token authenticates nodes joining the cluster
NODE_TOKEN=$(uuid)
{{ teleport_bin_dir }}tctl nodes add --roles=node --ttl=4h --token=${NODE_TOKEN}
aws ssm put-parameter --name /teleport/{{ teleport_cluster_name }}/tokens/node --region {{ teleport_region }} --type="SecureString" --value="${NODE_TOKEN}" --overwrite

# Export CA certificate to SSM parameter store
# so nodes and proxies can check the identity of the auth server they are connecting to
CERT=$({{ teleport_bin_dir }}tctl auth export --type=tls)
aws ssm put-parameter --name /teleport/{{ teleport_cluster_name }}/ca --region {{ teleport_region }} --type="String" --value="${CERT}" --overwrite

# trusted cluster token
TRUSTED_CLUSTER_TOKEN=$(sudo {{ teleport_bin_dir }}tctl tokens add --type=trusted_cluster --ttl=4h 2>&1 | grep token:| sed 's/The cluster invite token: //g')
aws ssm put-parameter --name /teleport/{{ teleport_cluster_name }}/trusted_cluster --region {{ teleport_region }} --type="SecureString" --value="${TRUSTED_CLUSTER_TOKEN}" --overwrite
